@page "/AnimalEdit/{id}"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@inject UserManager<ApplicationUser> _userManager
@inject NavigationManager nav
@inject IDbContextFactory<DataContext> contextDb
@inject IWebHostEnvironment enviroment
@attribute [Authorize]

<PageTitle>Perfil</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (errorHandling)
        {
            @if (canInspect)
            {
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-3">
                    <div class="d-block mb-4 mb-md-0">
                        <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                            <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                                <li class="breadcrumb-item">
                                    <a href="#">
                                        <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                                    </a>
                                </li>
                                <li class="breadcrumb-item"><a href="/">ACasota</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Perfil</li>
                            </ol>
                        </nav>
                        <h2 class="h4">Perfil de Animal</h2>
                        <p class="mb-0">Página de especificações e caracteristicas do animal</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-xl-4">
                        <div class="row">
                            <div class="col-12 mb-4">
                                <div class="card shadow border-0 text-center p-0">
                                    <div class="profile-cover rounded-top" data-background="@coverPic">
                                        <img src="@coverPic" class="image-cover rounded-top" alt="Cover Picture">
                                    </div>
                                    <div class="card-body pb-5">
                                        <img src="@profilePic" class="avatar-xl rounded-circle mx-auto mt-n7 mb-4 image-fit"
                                             alt="Neil Portrait">
                                        <h4 class="h3">@animal_auth.Name</h4>
                                        <a class="btn btn-sm btn-gray-800 d-inline-flex align-items-center me-2" onclick="@updateAnimal">
                                            <svg class="icon icon-xs me-1" fill="currentColor" viewBox="0 0 20 20"
                                                 xmlns="http://www.w3.org/2000/svg">
                                                <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z">
                                                </path>
                                            </svg>
                                            Editar
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-xl-8">
                        <div class="card card-body border-0 shadow mb-4">
                            <h2 class="h5 mb-4">Informação pessoal</h2>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div>
                                        <label for="nome">Nome</label>
                                        <input type="text" @bind="@animal_auth.Name" @bind:event="oninput" class="form-control" placeholder="Introduza o nome do animal" id="nome" />
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div>
                                        <label for="raca">Especie</label>
                                        <input type="text" @bind="@animal_auth.Race" @bind:event="oninput" class="form-control" placeholder="Introduza a especie do animal" id="raca" />
                                    </div>
                                </div>
                            </div>
                            <div class="row align-items-center">
                                <div class="col-md-6 mb-3">
                                    <label for="age">Idade</label>
                                    <input type="text" @bind="@animal_auth.Age" @bind:event="oninput" class="form-control" placeholder="Introduza a idade do animal" id="age" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="cor">Cor</label>
                                    <input type="text" @bind="@animal_auth.Colour" @bind:event="oninput" class="form-control" placeholder="Introduza a cor do animal" id="cor" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <footer class="bg-white rounded shadow p-5 mb-4 mt-4">
                    <div class="row">
                        <div class="col-12 col-md-4 col-xl-6 mb-4 mb-md-0">
                            <p class="mb-0 text-center text-lg-start">© 2023<span class="current-year"></span> <a class="text-primary fw-normal" href="https://themesberg.com" target="_blank">ACasota</a></p>
                        </div>
                        <div class="col-12 col-md-8 col-xl-6 text-center text-lg-start">
                            <!-- List -->
                            <ul class="list-inline list-group-flush list-group-borderless text-md-end mb-0">
                                <li class="list-inline-item px-0 px-sm-2">
                                    <a href="https://themesberg.com/about">Instagram</a>
                                </li>
                                <li class="list-inline-item px-0 px-sm-2">
                                    <a href="https://themesberg.com/themes">Twitter</a>
                                </li>
                                <li class="list-inline-item px-0 px-sm-2">
                                    <a href="https://themesberg.com/blog">Facebook</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </footer>
            }
            else
            {
                <div class="row">
                    <div class="col-12 text-center d-flex align-items-center justify-content-center">
                        <div>
                            <img class="img-fluid w-75" src="../../assets/img/illustrations/403.svg" alt="403 forbidden">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 text-center d-flex align-items-center justify-content-center">
                        <div>
                            <h1 class="mt-5">Não tem <span class="fw-bolder text-primary">Autorização</span></h1>
                            <p class="lead my-4">Oops! Não tem autorização para ver o conteudo desta página. Se existir algum problema entra em contacto.</p>
                            <a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
                                <svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                                Voltar para a página principal
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="col-12 text-center d-flex align-items-center justify-content-center">
                    <div>
                        <img class="img-fluid w-75" src="../../assets/img/illustrations/404.svg" alt="404 not found">
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 text-center d-flex align-items-center justify-content-center">
                    <div>
                        <h1 class="mt-5">Página não <span class="fw-bolder text-primary">Disponivel</span></h1>
                        <p class="lead my-4">Oops! Este link não é o correto. Se existir algum problema entra em contacto.</p>
                        <a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
                            <svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                            Voltar para a página principal
                        </a>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string? id { get; set; }

    public Animal animal_auth { get; set; } = new Animal();

    private bool canInspect = true;
    private bool errorHandling = true;

    private string pathRoot = "";
    private string pathPicsRoot = "..\\users_pics";
    private string profilePic = "";
    private string coverPic = "";
    private long maxFileSize = 1024 * 1024 * 3;

    protected override async Task OnInitializedAsync()
    {
        pathRoot = Path.Combine(enviroment.ContentRootPath, "wwwroot", "users_pics");

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var ctx = contextDb.CreateDbContext())
            {
                try
                {
                    animal_auth = await ctx.Animals.Where(u => u.Id.Equals(this.id)).Include(c => c.User).FirstAsync();
                }
                catch
                {
                    errorHandling = false;
                    return;
                }

                pathPicsRoot = Path.Combine(pathPicsRoot, animal_auth.Id);

                if (!user.IsInRole("Admin"))
                {
                    if (!user.Identity.Name.Equals(animal_auth.User.UserName))
                    {
                        canInspect = false;
                    }
                }

                if (animal_auth.AnimalPicture != null && File.Exists(Path.Combine(pathRoot, animal_auth.Id, animal_auth.AnimalPicture)))
                {
                    profilePic = Path.Combine(pathPicsRoot, animal_auth.AnimalPicture);
                }
                else
                {
                    profilePic = "..\\assets\\img\\userDefault\\userDefault.jpg";
                }

                if (animal_auth.CoverPicture != null && File.Exists(Path.Combine(pathRoot, animal_auth.Id, animal_auth.AnimalPicture)))
                {
                    coverPic = Path.Combine(pathPicsRoot, animal_auth.CoverPicture);
                }
                else
                {
                    coverPic = "..\\assets\\img\\userDefault\\coverDefault.png";
                }
            }
        }
    }

    public async Task updateAnimal()
    {
        using (var ctx = contextDb.CreateDbContext())
        {
            ctx.Animals.Update(animal_auth);
            await ctx.SaveChangesAsync();
        }

        var location = "/Animal/" + animal_auth.Id;

        nav.NavigateTo(location);
    }
}
