@page "/AnimalUser/{id}"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IWebHostEnvironment enviroment
@inject IDbContextFactory<DataContext> contextDb
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Os meus Animais</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (errorHandling)
        {
            @if (canInspect)
            {
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
                    <div class="d-block mb-4 mb-md-0">
                        <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                            <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                                <li class="breadcrumb-item">
                                    <a href="/">
                                        <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                                    </a>
                                </li>
                                <li class="breadcrumb-item"><a href="/">ACasota</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Os meus Animais</li>
                            </ol>
                        </nav>
                        <h2 class="h4">Os meus Animais</h2>
                        <p class="mb-0">Os meus animais adotados!!</p>
                    </div>
                </div>
                <div class="table-settings mb-4">
                    <div class="row align-items-center justify-content-between">
                        <div class="col col-md-6 col-lg-3 col-xl-4">
                            <div class="input-group me-2 me-lg-3 fmxw-400">
                                <span class="input-group-text">
                                    <svg class="icon icon-xs" x-description="Heroicon name: solid/search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                                    </svg>
                                </span>
                                <input type="text" @bind="@searchWord" @oninput="@Search" class="form-control" placeholder="Procurar Animal">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card card-body border-0 shadow table-wrapper table-responsive" id="tableWidth">
                    <div class="row">
                        @if (usersShow.Count == 0)
                        {
                            <p style="text-align: center; height: 100px; align-content: center; display: inline-grid;">Não existem animais disponiveis!!</p>
                        }
                        else
                        {
                            @foreach (var userDb in usersShow)
                            {
                                {
                                    if (userDb.AnimalPicture != null && File.Exists(Path.Combine(pathRoot, userDb.Id, userDb.AnimalPicture)))
                                    {
                                        pathPic = Path.Combine(pathPicsRoot, userDb.Id, userDb.AnimalPicture);
                                    }
                                    else
                                    {
                                        pathPic = "..\\assets\\img\\userDefault\\userDefault.jpg";
                                    }
                                }

                                <div class="col-sm-3" style="margin-bottom:1rem">
                                    <a href="/Animal/@userDb.Id">
                                        <div class="card">
                                            <img class="card-img-top" src="@pathPic" alt="Card image cap">
                                            <div class="card-body">
                                                <h5 class="card-title">@userDb.Name</h5>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                </div>
                @if (numberPages > 1)
                {
                    <div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-between">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination mb-0">
                                <li class="page-item">
                                    <a class="page-link" @onclick="() => ChargeViewArray(numberPageActive - 1)">Previous</a>
                                </li>
                                @foreach (var pageView in pageSelection)
                                {
                                    if (pageView == numberPageActive)
                                    {
                                        <li class="page-item active">
                                            <a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item">
                                            <a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
                                        </li>
                                    }
                                }
                                <li class="page-item">
                                    <a class="page-link" @onclick="() => ChargeViewArray(numberPageActive + 1)">Next</a>
                                </li>
                            </ul>
                        </nav>
                        <div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
                    </div>
                }
                else
                {
                    <div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-right">
                        <div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
                    </div>
                }
            }
            else
            {
                <div class="row">
                    <div class="col-12 text-center d-flex align-items-center justify-content-center">
                        <div>
                            <img class="img-fluid w-75" src="../../assets/img/illustrations/403.svg" alt="403 forbidden">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 text-center d-flex align-items-center justify-content-center">
                        <div>
                            <h1 class="mt-5">Não tem <span class="fw-bolder text-primary">Autorização</span></h1>
                            <p class="lead my-4">Oops! Não tem autorização para ver o conteudo desta página. Se existir algum problema entra em contacto.</p>
                            <a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
                                <svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                                Voltar para a página principal
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="col-12 text-center d-flex align-items-center justify-content-center">
                    <div>
                        <img class="img-fluid w-75" src="../../assets/img/illustrations/404.svg" alt="404 not found">
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 text-center d-flex align-items-center justify-content-center">
                    <div>
                        <h1 class="mt-5">Página não <span class="fw-bolder text-primary">Disponivel</span></h1>
                        <p class="lead my-4">Oops! Este link não é o correto. Se existir algum problema entra em contacto.</p>
                        <a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
                            <svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                            Voltar para a página principal
                        </a>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public List<Animal> usersShow { get; set; } = new List<Animal>();
    public List<Animal> users { get; set; } = new List<Animal>();
    public List<Animal> userDB { get; set; } = new List<Animal>();

    public ApplicationUser user_auth { get; set; } = new ApplicationUser();

    [Parameter]
    public string? id { get; set; }

    private bool canInspect = true;
    private bool errorHandling = true;
    private bool areAdopted = true;

    private string pathRoot = "";
    private string pathPicsRoot = "..\\users_pics";
    private string pathPic = "";

    //Sets a list for the number of pages, set automatically
    public List<Int32> pageSelection { get; set; } = new List<Int32>();

    //Sets the number of entries per page for the table
    public int numberEntriesPerPage { get; set; } = 8;
    //Sets the total amount of entries, set automatically
    public int numberEntries { get; set; }
    //Sets the total amount of pages needed, set automatically
    public int numberPages { get; set; }
    //Sets the page active at the moment, set automatically
    public int numberPageActive { get; set; }

    //Sets the indexes for the pages, set automatically
    public int startIndex { get; set; }
    public int endIndex { get; set; }

    //This is the proprietie that will be used to search a user
    public string searchWord { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        pathRoot = Path.Combine(enviroment.ContentRootPath, "wwwroot", "users_pics");

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var ctx = contextDb.CreateDbContext())
            {
                try
                {
                    var userCM = await ctx.Users.SingleAsync(m => m.Id == id);
                    user_auth = await ctx.Users.SingleAsync(u => u.UserName.Equals(user.Identity.Name));
                }
                catch
                {
                    errorHandling = false;
                    return;
                }

                if (user_auth.Id != id)
                {
                    canInspect = false;
                    return;
                }

                var usersCT = await ctx.Animals.Where(x => x.UserId == id).ToListAsync();

                if (usersCT != null || usersCT.Count != 0)
                {
                    foreach (var userct in usersCT)
                    {
                        userDB.Add(userct);
                    }
                }
                else
                {
                    areAdopted = false;
                    return;
                }
            }

            userFill();

            //Sets number of total entries
            numberEntries = users.Count;

            //Sets the total amount of pages needed
            numberPages = numberEntries / numberEntriesPerPage;
            if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
            {
                numberPages++;
            }

            if (numberPages == 0)
            {
                foreach (var userInDb in users)
                {
                    usersShow.Add(userInDb);
                }

                if (numberEntries == 0)
                {
                    startIndex = 0;
                }
                else
                {
                    startIndex = 1;
                }

                endIndex = numberEntries;
            }
            else
            {
                for (var x = 1; x <= numberPages; x++)
                {
                    pageSelection.Add(x);
                }

                numberPageActive = 1;

                ChargeViewArray(1);
            }
        }
    }

    public void ChargeViewArray(int numberPage)
    {
        if (numberPage < 1 || numberPage > numberPages)
        {
            return;
        }
        else if (numberPage == 1)
        {
            usersShow.Clear();

            startIndex = 1;
            endIndex = numberEntriesPerPage;

            for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
            {
                usersShow.Add(users[numberOfUser]);
            }

            numberPageActive = 1;

            return;
        }
        else if (numberPage > numberPageActive)
        {
            var numSpaces = numberEntriesPerPage * (numberPage - numberPageActive);

            startIndex += numSpaces;
            endIndex += numSpaces;

            if (endIndex > users.Count)
            {
                endIndex = numberEntries;
            }
        }
        else if (numberPage < numberPageActive)
        {
            var numSpaces = numberEntriesPerPage * (numberPageActive - numberPage);

            startIndex -= numSpaces;
            endIndex -= numSpaces;
        }

        numberPageActive = numberPage;

        usersShow.Clear();

        var currentIndex = startIndex - 1;

        for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
        {
            if (currentIndex >= users.Count || currentIndex < 0)
            {
                break;
            }

            usersShow.Add(users[currentIndex]);

            currentIndex++;
        }
    }

    public void Search(ChangeEventArgs e)
    {
        searchWord = e.Value.ToString();

        userFill();

        //Sets number of total entries
        numberEntries = users.Count;

        //Sets the total amount of pages needed
        numberPages = numberEntries / numberEntriesPerPage;
        if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
        {
            numberPages++;
        }

        if (numberPages == 0)
        {
            foreach (var userInDb in users)
            {
                usersShow.Add(userInDb);
            }

            startIndex = 1;
            endIndex = numberEntries;
        }
        else
        {
            pageSelection.Clear();

            for (var x = 1; x <= numberPages; x++)
            {
                pageSelection.Add(x);
            }

            numberPageActive = 1;

            ChargeViewArray(1);
        }
    }

    public void userFill()
    {
        users.Clear();
        usersShow.Clear();

        if (searchWord == "")
        {
            users.AddRange(userDB);
        }
        else
        {
            foreach (var u in userDB)
            {
                var nameLower = u.Name.ToLower();
                var searchLower = searchWord.ToLower();

                if (nameLower.Contains(searchLower))
                {
                    users.Add(u);
                }
            }
        }
    }
}
