@page "/UserManagement"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<DataContext> contextDb

@attribute [Authorize]

<PageTitle>Gestão de Utilizadores</PageTitle>
<AuthorizeView Roles ="Admin">
	<Authorized>
		<h1>Lista de utilizadores</h1>
		<table class="table">
			<thead>
				<tr>
					<th>Primeiro Nome</th>
					<th>Ultimo Nome</th>
					<th>Email</th>
					<th>Data de Nascimento</th>
					<th>Ações</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var userDb in users)
				{
						<tr>
							<td>@userDb.FirstName</td>
							<td>@userDb.LastName</td>
							<td>@userDb.Email</td>
							<td>@userDb.Date_Birth.Date</td>
							<td>
								@if (userDb.IsEnabled)
								{
									<button class="btn btn-pill btn-danger" @onclick="() => blockUser(userDb.Id, userDb.IsEnabled)">Bloquear</button>
								}
								else
								{
									<button class="btn btn-pill btn-outline-danger" @onclick="() => blockUser(userDb.Id, userDb.IsEnabled)">Desbloquear</button>
								}
								<a class="btn btn-pill btn-primary" href="/UserEdit/@userDb.Id">Editar</a>
							</td>
						</tr>
				}
			</tbody>
		</table>
	</Authorized>
	<NotAuthorized>
		<p role="status">Não tem autorização para aceder a esta página</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateTask { get; set; }
	public List<ApplicationUser> users { get; set; } = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateTask;
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			using (var ctx = contextDb.CreateDbContext())
			{
				var usersCT = await ctx.Users.ToArrayAsync();

				foreach (var userct in usersCT)
				{
					users.Add(userct);
				}
			}
		}
	}

	public async Task blockUser(string id, bool enable)
	{
		using (var ctx = contextDb.CreateDbContext())
		{
			foreach (var user in users)
			{
				if (user.Id.Equals(id))
				{
					user.IsEnabled = !enable;
					ctx.Users.Update(user);

					await ctx.SaveChangesAsync();
				}
			}
		}
	}
}
