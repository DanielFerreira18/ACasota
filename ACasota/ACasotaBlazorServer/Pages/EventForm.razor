@page "/EventForm/{id}"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@inject UserManager<ApplicationUser> _userManager
@inject NavigationManager nav
@inject IDbContextFactory<DataContext> contextDb
@inject IWebHostEnvironment enviroment
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<PageTitle>Perfil</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (render)
        {
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-3">
                <div class="d-block mb-4 mb-md-0">
                    <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                        <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                            <li class="breadcrumb-item">
                                <a href="/">
                                    <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                                </a>
                            </li>
                            <li class="breadcrumb-item"><a href="/">ACasota</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Perfil</li>
                        </ol>
                    </nav>
                    <h2 class="h4">Perfil de Utilizador</h2>
                    <p class="mb-0">Página de especificações e caracteristicas do utilizador</p>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-12 col-xl-12">
                    <div class="card card-body border-0 shadow mb-4">
                        <div class="row">
                            <div class="col-md-6">
                                <h2 class="h5 mb-4">Informação de animais existentes</h2>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="HasAnimal">Nome do Evento</label>
                                        <label class="form-control" id="HasAnimal">@user_auth.Name</label>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <label for="DescAnimal">Descrição do Evento</label>
                                    <label class="form-control" style="height: 100px;" placeholder="Descrição..." id="DescAnimal" rows="4">@user_auth.Description</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h2 class="h5 mb-4">Informação técnicas do Evento</h2>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="UserAddress">Data Inicio</label>
                                            <label class="form-control" id="UserAddress">@user_auth.InitialDate.Date.ToString("D", new System.Globalization.CultureInfo("pt-PT"))</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="UserHouseType">Data Fim</label>
                                            <label class="form-control" id="UserHouseType">@user_auth.EndDate.Date.ToString("D", new System.Globalization.CultureInfo("pt-PT"))</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="UserHouseTipology">Hora Inicio</label>
                                            <label class="form-control" id="UserHouseTipology">@user_auth.InitialDate.ToString("HH:mm")</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="UserHouseTipology">Hora Fim</label>
                                            <label class="form-control" id="UserHouseTipology">@user_auth.EndDate.ToString("HH:mm")</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="UserCity">Quantidade</label>
                                            <label class="form-control" id="UserCity">@user_auth.Count/@user_auth.MaxAmount</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group d-flex justify-content-center">
                                            @if (user_auth.State == 0)
                                            {
                                                <span class="fw-bold text-danger">Evento Cancelado</span>
                                            }
                                            else if (user_auth.State == 1)
                                            {
                                                @if (isAdmin)
                                                {
                                                    <button type="button" id="bts" class="ms-2 btn btn-success" @onclick="EndEvent">Finalizar</button>
                                                    @if (!isInscripted)
                                                    {
                                                        <button type="button" id="bts" class="ms-2 btn btn-secondary" @onclick="RegisterInEvent">Inscrever-se</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" id="bts" class="ms-2 btn btn-secondary" @onclick="UnregisterInEvent">Anular Inscrição</button>
                                                    }
                                                    <button type="button" id="bts" class="ms-2 btn btn-danger" @onclick="CancelEvent">Cancelar</button>
                                                }
                                                else
                                                {
                                                    @if (!isInscripted)
                                                    {
                                                        <button type="button" id="bts" class="ms-2 btn btn-secondary" @onclick="RegisterInEvent">Inscrever-se</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" id="bts" class="ms-2 btn btn-secondary" @onclick="UnregisterInEvent">Anular Inscrição</button>
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <span class="fw-bold text-success">Evento Finalizado</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-xl-12">
                    <div class="card card-body border-0 shadow table-wrapper table-responsive" id="tableWidth">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="border-gray-200">Nome</th>
                                    <th class="border-gray-200">E-mail</th>
                                    <th class="border-gray-200">Telemovel</th>
                                    <th class="border-gray-200">Morada</th>
                                    <th class="border-gray-200">Género</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (user_auth.EventUsers.Count != 0 || user_auth.EventUsers != null)
                                {
                                    @foreach (var userDb in user_auth.EventUsers)
                                    {
                                        {
                                            if (userDb.User.ProfilePic != null && File.Exists(Path.Combine(pathRoot, userDb.User.UserName, userDb.User.ProfilePic)))
                                            {
                                                pathPic = Path.Combine(pathPicsRoot, userDb.User.UserName, userDb.User.ProfilePic);
                                            }
                                            else
                                            {
                                                pathPic = "..\\assets\\img\\userDefault\\userDefault.jpg";
                                            }
                                        }
                                        <!-- Item -->
                                        <tr>
                                            <td>
                                                <a href="/Profiles/@userDb.User.Id" class="fw-bold">
                                                    <img class="me-2 image image-xs rounded-circle" alt="Image placeholder" src="@pathPic">
                                                    <span class="h6">@userDb.User.FirstName @userDb.User.LastName</span>
                                                </a>
                                            </td>
                                            <td><span class="fw-normal">@userDb.User.Email</span></td>

                                            @if (userDb.User.PhoneNumber == null)
                                            {
                                                <td><span class="fw-normal text-danger">Numero indisponivel</span></td>
                                            }
                                            else
                                            {
                                                <td><span class="fw-normal">@userDb.User.PhoneNumber</span></td>
                                            }

                                            @if (userDb.User.Address == null)
                                            {
                                                <td><span class="fw-normal text-danger">Morada indisponivel</span></td>
                                            }
                                            else
                                            {
                                                <td><span class="fw-normal">@userDb.User.Address</span></td>
                                            }

                                            @if (userDb.User.Sex == "Female")
                                            {
                                                <td><span class="fw-bold text-success">Feminina</span></td>
                                            }
                                            else
                                            {
                                                <td><span class="fw-bold text-danger">Masculino</span></td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string? id { get; set; }

    public Event user_auth { get; set; } = new Event();

    private bool render = false;
    private bool renderInside = false;
    private bool isAdmin = false;
    private bool isInscripted = false;

    private bool errorHandling = true;

    //List of extentions
    public List<string> imageExtensions = new List<string> { ".jpg", ".jpeg", ".png" };

    //Bool control extention
    public bool hasExtention = false;

    private string pathRoot = "";
    private string pathPicsRoot = "..\\users_pics";
    private string pathPic = "";
    private long maxFileSize = 1024 * 1024 * 3;

    //Methods
    protected override async Task OnInitializedAsync()
    {
        pathRoot = Path.Combine(enviroment.ContentRootPath, "wwwroot", "users_pics");

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var ctx = contextDb.CreateDbContext())
            {
                user_auth = await ctx.Events.Where(u => u.Id.Equals(this.id)).Include(u => u.EventUsers).FirstAsync();
                user_auth.EventUsers = await ctx.EventUsers.Where(u => u.EventId.Equals(this.id)).Include(u => u.User).Include(u => u.Event).ToListAsync();

                foreach (var userEvent in user_auth.EventUsers)
                {
                    if (user.Identity.Name.Equals(userEvent.User.UserName))
                    {
                        isInscripted = true;
                    }
                }

                if (user.IsInRole("Admin") || user.IsInRole("AdminPartner"))
                {
                    isAdmin = true;
                }

                render = true;
            }
        }
    }

    public void Navs()
    {
        nav.NavigateTo("/EventForm/" + this.id, true);
    }

    public async Task AddCount()
    {
        using (var ctx = contextDb.CreateDbContext())
        {
            user_auth.Count++;

            ctx.Events.Update(user_auth);
            await ctx.SaveChangesAsync();
        }
    }

    public async Task DeleteCount()
    {
        using (var ctx = contextDb.CreateDbContext())
        {
            user_auth.Count--;

            ctx.Events.Update(user_auth);
            await ctx.SaveChangesAsync();
        }
    }

    public async Task EndEvent()
    {
        using (var ctx = contextDb.CreateDbContext())
        {
            user_auth.State = 2;

            ctx.Events.Update(user_auth);
            await ctx.SaveChangesAsync();

            StateHasChanged();
        }
    }

    public async Task CancelEvent()
    {
        using (var ctx = contextDb.CreateDbContext())
        {
            user_auth.State = 0;

            ctx.Events.Update(user_auth);
            await ctx.SaveChangesAsync();

            StateHasChanged();
        }
    }

    public async Task RegisterInEvent()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        Event thisEvent = new Event();
        EventUser eventUser = new EventUser();
        ApplicationUser userEvent = new ApplicationUser();

        using (var ctx = contextDb.CreateDbContext())
        {
            userEvent = await ctx.Users.Where(u => u.UserName.Equals(user.Identity.Name)).FirstAsync();
            thisEvent = await ctx.Events.Where(e => e.Id.Equals(this.id)).FirstAsync();

            eventUser.UserId = userEvent.Id;
            eventUser.User = userEvent;
            eventUser.EventId = this.id;
            eventUser.Event = thisEvent;

            await ctx.EventUsers.AddAsync(eventUser);
            await ctx.SaveChangesAsync();
        }

        await AddCount();

        user_auth.EventUsers.Add(eventUser);
        isInscripted = true;

        StateHasChanged();
    }

    public async Task UnregisterInEvent()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        ApplicationUser userEvent = new ApplicationUser();
        Event thisEvent = new Event();
        EventUser eventUser = new EventUser();

        using (var ctx = contextDb.CreateDbContext())
        {
            userEvent = await ctx.Users.Where(u => u.UserName.Equals(user.Identity.Name)).FirstAsync();
            thisEvent = await ctx.Events.Where(e => e.Id.Equals(this.id)).FirstAsync();

            eventUser.UserId = userEvent.Id;
            eventUser.User = userEvent;
            eventUser.EventId = this.id;
            eventUser.Event = thisEvent;

            ctx.EventUsers.Remove(eventUser);
            await ctx.SaveChangesAsync();
        }

        foreach (var eu in user_auth.EventUsers)
        {
            if (eu.UserId.Equals(userEvent.Id))
            {
                eventUser = eu;
            }
        }

        await DeleteCount();

        user_auth.EventUsers.Remove(eventUser);
        isInscripted = false;

        StateHasChanged();
    }
}