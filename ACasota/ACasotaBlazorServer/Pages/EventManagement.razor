@page "/EventManagement"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager nav
@inject IDbContextFactory<DataContext> contextDb
@inject IWebHostEnvironment enviroment
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Gestão de Eventos</PageTitle>

<AuthorizeView Roles="Admin">
	<Authorized>
		<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
			<div class="d-block mb-4 mb-md-0">
				<nav aria-label="breadcrumb" class="d-none d-md-inline-block">
					<ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
						<li class="breadcrumb-item">
							<a href="/">
								<svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
							</a>
						</li>
						<li class="breadcrumb-item"><a href="/">ACasota</a></li>
						<li class="breadcrumb-item active" aria-current="page">Gestão de Eventos</li>
					</ol>
				</nav>
				<h2 class="h4">Gestão de Eventos</h2>
				<p class="mb-0">Página de gestão para todos os eventos.</p>
			</div>
		</div>
		<div class="table-settings mb-4">
			<div class="row align-items-center justify-content-between">
				<div class="col col-md-6 col-lg-3 col-xl-4">
					<div class="input-group me-2 me-lg-3 fmxw-400">
						<span class="input-group-text">
							<svg class="icon icon-xs" x-description="Heroicon name: solid/search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
							</svg>
						</span>
						<input type="text" @bind="@searchWord" @oninput="@Search" class="form-control" placeholder="Procurar Eventos">
					</div>
				</div>
				@if (isAdmin)
				{
					<div class="col-4 col-md-3 col-xl-2 ps-md-0 text-end">
						<button type="button" class="btn btn-sm btn-gray-800 d-inline-flex align-items-center me-2" data-bs-toggle="modal" data-bs-target="#modal-form-signup">Registar Evento</button>
					</div>
					<button type="button" id="openSecond-modal" class="ms-2 btn large-form-btn btn-secondary" data-bs-toggle="modal" data-bs-target="#modal-achievement" hidden>OpenSecond</button>
					<!-- Modal Content -->
					<div class="modal fade" id="modal-form-signup" tabindex="-1" role="dialog" aria-labelledby="modal-form-signup" aria-hidden="true">
						<div class="modal-dialog modal-dialog-centered" role="document">
							<div class="modal-content">
								<div class="modal-body p-0">
									<div class="card p-3 p-lg-4">
										<button type="button" class="btn-close ms-auto" data-bs-dismiss="modal" aria-label="Close"></button>
										<div class="text-center text-md-center mb-4 mt-md-0">
											<h1 class="mb-0 h4">Novo registo de Evento</h1>
										</div>
										<!-- Form -->
										<div class="form-group mb-4">
											<label for="nome">Nome do Evento</label>
											<div class="input-group">
												<input type="text" @bind="@eventReg.Name" @bind:event="oninput" class="form-control" placeholder="Nome do Evento" id="nome" autofocus required>
											</div>
										</div>
										<div class="form-group mb-4">
											<label for="especie">Descrição do Evento</label>
											<div class="input-group">
												<textarea @bind="@eventReg.Description" @bind:event="oninput" class="form-control" style="color:black;" placeholder="Descrição..." id="textarea" rows="4"></textarea>
											</div>
										</div>
										<div class="form-group mb-4">
											<label for="birthday">Data de Inicio</label>
											<div class="input-group">
												<span class="input-group-text">
													<svg class="icon icon-xs text-gray-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg%22%3E"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>
												</span>
												<input @bind="@eventReg.InitialDate" data-datepicker="" class="form-control" id="birthday" type="text" placeholder="dd/mm/yyyy" required>
											</div>
										</div>
										<div class="form-group mb-4">
											<label for="datafim">Data de Fim</label>
											<div class="input-group">
												<span class="input-group-text">
													<svg class="icon icon-xs text-gray-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg%22%3E"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>
												</span>
												<input @bind="@eventReg.EndDate" data-datepicker="" class="form-control" id="datafim" type="text" placeholder="dd/mm/yyyy" required>
											</div>
										</div>
										<div class="form-group mb-4">
											<label for="nome">Numero de participantes</label>
											<div class="input-group">
												<input type="text" @bind="@eventReg.MaxAmount" @bind:event="oninput" class="form-control" placeholder="Nome do Evento" id="nome" autofocus required>
											</div>
										</div>
										<!-- End of Form -->
										<p class="text-danger" style="text-align: left;">@errors</p>
										<div class="d-grid mb-4">
											<button type="button" class="btn btn-secondary" @onclick="CreateEvent">Registar Evento</button>
											<button type="button" id="close-modal" class="ms-2 btn large-form-btn btn-secondary" data-bs-dismiss="modal" hidden>Close</button>
										</div>
										<div class="text-center text-md-center mb-4 mt-md-0">
											<p class="text-gray">Após preenchimento do formulário é criado o evento!</p>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<!-- End of Modal Content -->
					<!-- Modal Content -->
					<div class="modal fade" id="modal-achievement" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modal-achievement" aria-hidden="true">
						<div class="modal-dialog modal-success modal-dialog-centered" role="document">
							<div class="modal-content">
								<button type="button" class="btn-close theme-settings-close fs-6 ms-auto" data-bs-dismiss="modal" aria-label="Close"></button>
								<div class="modal-header mx-auto">
								</div>
								<div class="modal-body pt-0">
									<div class="py-3 px-5 text-center">
										<span class="modal-icon display-1 text-white">
											<svg class="icon icon-xxl text-gray-200" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
												<path clip-rule="evenodd" fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"></path>
											</svg>
										</span>
										<h2 class="h3 modal-title mb-3 text-white">Um novo evento foi criado!!</h2>
										<p class="mb-4 text-white">Processo de criação de eventos completos com sucesso, volte para a página de Gestão de Eventos</p>
									</div>
								</div>
								<div class="modal-footer d-flex justify-content-center pt-0 pb-3">
									<button type="button" id="bts" class="ms-2 btn large-form-btn btn-secondary" data-bs-dismiss="modal" @onclick="Navs">Finalizar</button>
								</div>
							</div>
						</div>
					</div>
					<!-- End of Modal Content -->
				}
			</div>
		</div>
		<div class="card card-body border-0 shadow table-wrapper table-responsive">
			@if (usersShow.Count == 0)
			{
				<p style="text-align: center; height: 100px; align-content: center; display: inline-grid;">Não existem eventos disponiveis!!</p>
			}
			else
			{
				<table class="table table-hover">
					<thead>
						<tr>
							<th class="border-gray-200">Nome do Evento</th>
							<th class="border-gray-200">Criador do Evento</th>
							<th class="border-gray-200">Data Inicio</th>
							<th class="border-gray-200">Data Fim</th>
							<th class="border-gray-200">Número de pessoas</th>
							<th class="border-gray-200">Estado do Evento</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var userDb in usersShow)
						{
							<!-- Item -->
							<tr>
								<td>
									<a href="/Profiles/@userDb.Id" class="fw-bold">
										<span class="h6">@userDb.Name</span>
									</a>
								</td>
								<td><span class="fw-normal">@userDb.User.FirstName @userDb.User.LastName</span></td>
								<td><span class="fw-normal">@userDb.InitialDate.Date</span></td>
								<td><span class="fw-normal">@userDb.EndDate.Date</span></td>
								<td><span class="fw-normal">@userDb.Count/@userDb.MaxAmount</span></td>
								@if (userDb.State)
								{
									<td><span class="fw-bold text-success">Aberto</span></td>
								}
								else
								{
									<td><span class="fw-bold text-danger">Fechado</span></td>
								}
							</tr>
						}

					</tbody>
				</table>
			}
		</div>
		@if (numberPages > 1)
		{
			<div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-between">
				<nav aria-label="Page navigation example">
					<ul class="pagination mb-0">
						<li class="page-item">
							<a class="page-link" @onclick="() => ChargeViewArray(numberPageActive - 1)">Previous</a>
						</li>
						@foreach (var pageView in pageSelection)
						{
							if (pageView == numberPageActive)
							{
								<li class="page-item active">
									<a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
								</li>
							}
							else
							{
								<li class="page-item">
									<a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
								</li>
							}
						}
						<li class="page-item">
							<a class="page-link" @onclick="() => ChargeViewArray(numberPageActive + 1)">Next</a>
						</li>
					</ul>
				</nav>
				<div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
			</div>
		}
		else
		{
			<div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-right">
				<div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
			</div>
		}
		<footer class="bg-white rounded shadow p-5 mb-4 mt-4">
			<div class="row">
				<div class="col-12 col-md-4 col-xl-6 mb-4 mb-md-0">
					<p class="mb-0 text-center text-lg-start">© 2023<span class="current-year"></span> <a class="text-primary fw-normal" href="https://themesberg.com" target="_blank">ACasota</a></p>
				</div>
				<div class="col-12 col-md-8 col-xl-6 text-center text-lg-start">
					<!-- List -->
					<ul class="list-inline list-group-flush list-group-borderless text-md-end mb-0">
						<li class="list-inline-item px-0 px-sm-2">
							<a href="https://themesberg.com/about">Instagram</a>
						</li>
						<li class="list-inline-item px-0 px-sm-2">
							<a href="https://themesberg.com/themes">Twitter</a>
						</li>
						<li class="list-inline-item px-0 px-sm-2">
							<a href="https://themesberg.com/blog">Facebook</a>
						</li>
					</ul>
				</div>
			</div>
		</footer>
	</Authorized>
	<NotAuthorized>
		<div class="row">
			<div class="col-12 text-center d-flex align-items-center justify-content-center">
				<div>
					<img class="img-fluid w-75" src="../../assets/img/illustrations/403.svg" alt="403 forbidden">
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-12 text-center d-flex align-items-center justify-content-center">
				<div>
					<h1 class="mt-5">Não tem <span class="fw-bolder text-primary">Autorização</span></h1>
					<p class="lead my-4">Oops! Não tem autorização para ver o conteudo desta página. Se existir algum problema entra em contacto.</p>
					<a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
						<svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
						Voltar para a página principal
					</a>
				</div>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateTask { get; set; }
	public List<Event> usersShow { get; set; } = new List<Event>();
	public List<Event> users { get; set; } = new List<Event>();
	public List<Event> userDB { get; set; } = new List<Event>();

	//Sets a list for the number of pages, set automatically
	public List<Int32> pageSelection { get; set; } = new List<Int32>();

	//Checks if user is admin so he can register a new event
	private bool isAdmin = true;

	//New event that is being created
	private Event eventReg { get; set; } = new Event();

	//Errors when the user doesnt input all the date when creating an event
	public string errors { get; set; } = "";

	//Sets the number of entries per page for the table
	public int numberEntriesPerPage { get; set; } = 10;
	//Sets the total amount of entries, set automatically
	public int numberEntries { get; set; }
	//Sets the total amount of pages needed, set automatically
	public int numberPages { get; set; }
	//Sets the page active at the moment, set automatically
	public int numberPageActive { get; set; }

	//Sets the indexes for the pages, set automatically
	public int startIndex { get; set; }
	public int endIndex { get; set; }

	//This is the proprietie that will be used to search a user
	public string searchWord { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateTask;
		var user = authState.User;

		eventReg.InitialDate = DateTime.Now.Date;
		eventReg.EndDate = DateTime.Now.Date;

		if (user.Identity.IsAuthenticated)
		{
			using (var ctx = contextDb.CreateDbContext())
			{
				var usersCT = await ctx.Events.Include(c => c.User).ToArrayAsync();
				ApplicationUser user_Event = await ctx.Users.SingleAsync(u => u.UserName == user.Identity.Name);

				if (user.IsInRole("Admin"))
				{
					foreach (var userct in usersCT)
					{
						userDB.Add(userct);
					}
				}
				else
				{
					isAdmin = false;
					foreach (var userct in usersCT)
					{
						if (userct.UserId.Equals(user_Event.Id))
						{
							userDB.Add(userct);
						}
					}
				}
			}

			userFill();

			//Sets number of total entries
			numberEntries = users.Count;

			//Sets the total amount of pages needed
			numberPages = numberEntries / numberEntriesPerPage;
			if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
			{
				numberPages++;
			}

			if (numberPages == 0)
			{
				foreach (var userInDb in users)
				{
					usersShow.Add(userInDb);
				}

				if (numberEntries == 0)
				{
					startIndex = 0;
				}
				else
				{
					startIndex = 1;
				}

				endIndex = numberEntries;
			}
			else
			{
				for (var x = 1; x <= numberPages; x++)
				{
					pageSelection.Add(x);
				}

				numberPageActive = 1;

				ChargeViewArray(1);
			}
		}
	}

	public void ChargeViewArray(int numberPage)
	{
		if (numberPage < 1 || numberPage > numberPages)
		{
			return;
		}
		else if (numberPage == 1)
		{
			usersShow.Clear();

			startIndex = 1;
			endIndex = numberEntriesPerPage;

			for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
			{
				usersShow.Add(users[numberOfUser]);
			}

			numberPageActive = 1;

			return;
		}
		else if (numberPage > numberPageActive)
		{
			var numSpaces = numberEntriesPerPage * (numberPage - numberPageActive);

			startIndex += numSpaces;
			endIndex += numSpaces;

			if (endIndex > users.Count)
			{
				endIndex = numberEntries;
			}
		}
		else if (numberPage < numberPageActive)
		{
			var numSpaces = numberEntriesPerPage * (numberPageActive - numberPage);

			startIndex -= numSpaces;
			endIndex -= numSpaces;
		}

		numberPageActive = numberPage;

		usersShow.Clear();

		var currentIndex = startIndex - 1;

		for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
		{
			if (currentIndex >= users.Count || currentIndex < 0)
			{
				break;
			}

			usersShow.Add(users[currentIndex]);

			currentIndex++;
		}
	}

	public void Search(ChangeEventArgs e)
	{
		searchWord = e.Value.ToString();

		userFill();

		//Sets number of total entries
		numberEntries = users.Count;

		//Sets the total amount of pages needed
		numberPages = numberEntries / numberEntriesPerPage;
		if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
		{
			numberPages++;
		}

		if (numberPages == 0)
		{
			foreach (var userInDb in users)
			{
				usersShow.Add(userInDb);
			}

			startIndex = 1;
			endIndex = numberEntries;
		}
		else
		{
			pageSelection.Clear();

			for (var x = 1; x <= numberPages; x++)
			{
				pageSelection.Add(x);
			}

			numberPageActive = 1;

			ChargeViewArray(1);
		}
	}

	public void userFill()
	{
		users.Clear();
		usersShow.Clear();

		if (searchWord == "")
		{
			users.AddRange(userDB);
		}
		else
		{
			foreach (var u in userDB)
			{
				var firstNameLower = u.User.FirstName.ToLower();
				var lastNameLower = u.User.LastName.ToLower();
				var eventNameLower = u.Name.ToLower();
				var searchLower = searchWord.ToLower();

				if (firstNameLower.Contains(searchLower) || lastNameLower.Contains(searchLower) || eventNameLower.Contains(searchLower))
				{
					users.Add(u);
				}
			}
		}
	}

	public void Navs()
	{
		nav.NavigateTo("/Eventmanagement", true);
	}

	public void GetDown()
	{
		JSRuntime.InvokeVoidAsync("DownModal");
	}

	public async Task CreateEvent()
	{
		eventReg.Id = Guid.NewGuid().ToString();

		using (var ctx = contextDb.CreateDbContext())
		{
			try
			{
				await ctx.Events.AddAsync(eventReg);
				await ctx.SaveChangesAsync();
			}
			catch
			{
				errors = "Preencha todos as caractristicas do evento!!";
				return;
			}

			GetDown();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("DateTimePicker");
		}
	}

}

