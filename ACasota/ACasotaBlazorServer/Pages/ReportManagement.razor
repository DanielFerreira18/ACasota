@page "/ReportManagement"
@using System.Collections
@using ACasotaBlazorServer.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager nav
@inject IDbContextFactory<DataContext> contextDb
@inject IWebHostEnvironment enviroment
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Gestão de Reportes</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="/">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item"><a href="/">ACasota</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Gestão de Reportes</li>
                    </ol>
                </nav>
                <h2 class="h4">Gestão de Reportes</h2>
                <p class="mb-0">Página de gestão para todos os reports.</p>
            </div>
        </div>
        <div class="table-settings mb-4">
            <div class="row align-items-center justify-content-between">
                <div class="col col-md-6 col-lg-3 col-xl-4">
                    <div class="input-group me-2 me-lg-3 fmxw-400">
                        <span class="input-group-text">
                            <svg class="icon icon-xs" x-description="Heroicon name: solid/search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                            </svg>
                        </span>
                        <input type="text" @bind="@searchWord" @oninput="@Search" class="form-control" placeholder="Procurar Reports">
                    </div>
                </div>
            </div>
        </div>
        <div class="card card-body border-0 shadow table-wrapper table-responsive" id="tableWidth">
            @if (usersShow.Count == 0)
            {
                <p style="text-align: center; height: 100px; align-content: center; display: inline-grid;">Não existem reports disponiveis!!</p>
            }
            else
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th class="border-gray-200">Id</th>
                            <th class="border-gray-200">Morada</th>
                            <th class="border-gray-200">Coordenadas</th>
                            <th class="border-gray-200">Data</th>
                            <th class="border-gray-200">Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var userDb in usersShow)
                        {
                            {
                                newID++;

                                if (newID < 10)
                                {
                                    writeID = "000" + newID;
                                }
                                else if (newID >= 10 && newID < 100)
                                {
                                    writeID = "00" + newID;
                                }
                                else if (newID >= 100 && newID < 1000)
                                {
                                    writeID = "0" + newID;
                                }
                                else
                                {
                                    writeID = "" + newID;
                                }
                            }
                            <!-- Item -->
                            <tr>
                                <td>
                                    <a href="/ReportForm/@userDb.Id" class="fw-bold">
                                        <span class="h6">@writeID</span>
                                    </a>
                                </td>
                                <td><span class="fw-normal">@userDb.Street, @userDb.City</span></td>
                                <td><span class="fw-normal">@userDb.Latitude, @userDb.Longitude</span></td>
                                <td><span class="fw-normal">@userDb.DateCreated</span></td>
                                @if (!userDb.State)
                                {
                                    <td><span class="fw-bold text-secondary">Pendente</span></td>
                                }
                                else
                                {
                                    <td><span class="fw-bold text-success">Concluido</span></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        @if (numberPages > 1)
        {
            <div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-between">
                <nav aria-label="Page navigation example">
                    <ul class="pagination mb-0">
                        <li class="page-item">
                            <a class="page-link" @onclick="() => ChargeViewArray(numberPageActive - 1)">Previous</a>
                        </li>
                        @foreach (var pageView in pageSelection)
                        {
                            if (pageView == numberPageActive)
                            {
                                <li class="page-item active">
                                    <a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" @onclick="() => ChargeViewArray(pageView)">@pageView</a>
                                </li>
                            }
                        }
                        <li class="page-item">
                            <a class="page-link" @onclick="() => ChargeViewArray(numberPageActive + 1)">Next</a>
                        </li>
                    </ul>
                </nav>
                <div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
            </div>
        }
        else
        {
            <div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-right">
                <div class="fw-normal small mt-4 mt-lg-0">Showing <b>@startIndex</b> to <b>@endIndex</b> out of <b>@numberEntries</b> entries</div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col-12 text-center d-flex align-items-center justify-content-center">
                <div>
                    <img class="img-fluid w-75" src="../../assets/img/illustrations/403.svg" alt="403 forbidden">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12 text-center d-flex align-items-center justify-content-center">
                <div>
                    <h1 class="mt-5">Não tem <span class="fw-bolder text-primary">Autorização</span></h1>
                    <p class="lead my-4">Oops! Não tem autorização para ver o conteudo desta página. Se existir algum problema entra em contacto.</p>
                    <a href="/" class="btn btn-gray-800 d-inline-flex align-items-center justify-content-center mb-4">
                        <svg class="icon icon-xs me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                        Voltar para a página principal
                    </a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public List<Report> usersShow { get; set; } = new List<Report>();
    public List<Report> users { get; set; } = new List<Report>();
    public List<Report> userDB { get; set; } = new List<Report>();

    public int newID = 0;
    public string writeID = "";

    //Sets a list for the number of pages, set automatically
    public List<Int32> pageSelection { get; set; } = new List<Int32>();

    //New event that is being created
    private Report reportReg { get; set; } = new Report();

    //Errors when the user doesnt input all the date when creating an event
    public string errors { get; set; } = "";

    //Sets the number of entries per page for the table
    public int numberEntriesPerPage { get; set; } = 10;
    //Sets the total amount of entries, set automatically
    public int numberEntries { get; set; }
    //Sets the total amount of pages needed, set automatically
    public int numberPages { get; set; }
    //Sets the page active at the moment, set automatically
    public int numberPageActive { get; set; }

    //Sets the indexes for the pages, set automatically
    public int startIndex { get; set; }
    public int endIndex { get; set; }

    //This is the proprietie that will be used to search a user
    public string searchWord { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var ctx = contextDb.CreateDbContext())
            {
                var usersCT = await ctx.Reports.ToArrayAsync();
                ApplicationUser user_Report = await ctx.Users.SingleAsync(u => u.UserName == user.Identity.Name);

                if (user.IsInRole("Admin") || user.IsInRole("AdminPartner"))
                {
                    foreach (var userct in usersCT)
                    {
                        userDB.Add(userct);
                    }
                }
                else
                {
                    foreach (var userct in usersCT)
                    {
                        if (userct.UserId.Equals(user_Report.Id))
                        {
                            userDB.Add(userct);
                        }
                    }
                }
            }

            userFill();

            //Sets number of total entries
            numberEntries = users.Count;

            //Sets the total amount of pages needed
            numberPages = numberEntries / numberEntriesPerPage;
            if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
            {
                numberPages++;
            }

            if (numberPages == 0)
            {
                foreach (var userInDb in users)
                {
                    usersShow.Add(userInDb);
                }

                if (numberEntries == 0)
                {
                    startIndex = 0;
                }
                else
                {
                    startIndex = 1;
                }

                endIndex = numberEntries;
            }
            else
            {
                for (var x = 1; x <= numberPages; x++)
                {
                    pageSelection.Add(x);
                }

                numberPageActive = 1;

                ChargeViewArray(1);
            }
        }
    }

    public void ChargeViewArray(int numberPage)
    {
        if (numberPage < 1 || numberPage > numberPages)
        {
            return;
        }
        else if (numberPage == 1)
        {
            usersShow.Clear();

            startIndex = 1;
            endIndex = numberEntriesPerPage;

            for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
            {
                usersShow.Add(users[numberOfUser]);
            }

            numberPageActive = 1;

            return;
        }
        else if (numberPage > numberPageActive)
        {
            var numSpaces = numberEntriesPerPage * (numberPage - numberPageActive);

            startIndex += numSpaces;
            endIndex += numSpaces;

            if (endIndex > users.Count)
            {
                endIndex = numberEntries;
            }
        }
        else if (numberPage < numberPageActive)
        {
            var numSpaces = numberEntriesPerPage * (numberPageActive - numberPage);

            startIndex -= numSpaces;
            endIndex -= numSpaces;
        }

        numberPageActive = numberPage;

        usersShow.Clear();

        var currentIndex = startIndex - 1;

        for (var numberOfUser = 0; numberOfUser < numberEntriesPerPage; numberOfUser++)
        {
            if (currentIndex >= users.Count || currentIndex < 0)
            {
                break;
            }

            usersShow.Add(users[currentIndex]);

            currentIndex++;
        }
    }

    public void Search(ChangeEventArgs e)
    {
        searchWord = e.Value.ToString();

        userFill();

        //Sets number of total entries
        numberEntries = users.Count;

        //Sets the total amount of pages needed
        numberPages = numberEntries / numberEntriesPerPage;
        if ((numberEntries % numberEntriesPerPage) != 0 && numberPages > 0)
        {
            numberPages++;
        }

        if (numberPages == 0)
        {
            foreach (var userInDb in users)
            {
                usersShow.Add(userInDb);
            }

            startIndex = 1;
            endIndex = numberEntries;
        }
        else
        {
            pageSelection.Clear();

            for (var x = 1; x <= numberPages; x++)
            {
                pageSelection.Add(x);
            }

            numberPageActive = 1;

            ChargeViewArray(1);
        }
    }

    public void userFill()
    {
        users.Clear();
        usersShow.Clear();

        if (searchWord == "")
        {
            users.AddRange(userDB);
        }
        else
        {
            foreach (var u in userDB)
            {
                var reportDate = u.DateCreated.Date.ToShortDateString().ToLower();
                var searchLower = searchWord.ToLower();

                if (reportDate.Contains(searchLower))
                {
                    users.Add(u);
                }
            }
        }
    }

    public void Navs()
    {
        nav.NavigateTo("/Reportmanagement", true);
    }

    public void GetDown()
    {
        JSRuntime.InvokeVoidAsync("DownModal");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("DateTimePicker");
        }
    }
}

